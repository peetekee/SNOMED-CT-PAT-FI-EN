import streamlit as st
import os
from dotenv import load_dotenv

# Set up page configuration
st.set_page_config(page_title="File Management")
st.markdown(
    r"""
    <style>
    .stDeployButton {
            visibility: hidden;
        }
    </style>
    """, unsafe_allow_html=True
)

# Define directories for upload and download folders
dirname = os.path.dirname(__file__)
dotenv_path = os.path.join(dirname, "../../.env")

load_dotenv(dotenv_path=dotenv_path)

upload_dir = os.path.join(dirname, os.getenv("UPLOAD_PATH"))
download_dir = os.path.join(dirname, os.getenv("DOWNLOAD_PATH"))

def list_files(directory):
    return [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f)) and f.endswith(('.xlsx'))]

# Utility function to delete a file
def delete_file(directory, filename):
    file_path = os.path.join(directory, filename)
    if os.path.exists(file_path):
        os.remove(file_path)
        st.success(f"File '{filename}' deleted successfully.")
    else:
        st.error(f"File '{filename}' not found.")

# Streamlit UI for file listing, download, and deletion
st.title("File Management")

# Section to list and manage files in the upload directory
st.header("Uploaded Files")

st.write("The user uploaded files are stored in the upload directory.")

uploaded_files = list_files(upload_dir)
if uploaded_files:
    for file_name in uploaded_files:
        col1, col2, col3 = st.columns([3, 1, 1])
        with col1:
            st.write(file_name)
        with col2:
            file_path = os.path.join(upload_dir, file_name)
            with open(file_path, "rb") as file:
                st.download_button(label="Download", data=file, file_name=file_name, mime="application/octet-stream", key=f"downloadbtn_{file_name}")
        with col3:
            if st.button(f"Delete", key=f"delete_{file_name}"):
                delete_file(upload_dir, file_name)
                st.experimental_rerun()
else:
    st.write("No uploaded files found.")

# Section to list and manage files in the download directory
st.header("Downloadable Files")

st.write("Downloadable files have been generated by the application and stored in the download directory.")

downloadable_files = list_files(download_dir)
if downloadable_files:
    for file_name in downloadable_files:
        col1, col2, col3 = st.columns([3, 1, 1])
        with col1:
            st.write(file_name)
        with col2:
            file_path = os.path.join(download_dir, file_name)
            with open(file_path, "rb") as file:
                st.download_button(label="Download", data=file, file_name=file_name, mime="application/octet-stream", key=f"downloadbtn_{file_name}_dl")
        with col3:
            if st.button(f"Delete", key=f"delete_{file_name}_dl"):
                delete_file(download_dir, file_name)
                st.experimental_rerun()
else:
    st.write("No downloadable files found.")
